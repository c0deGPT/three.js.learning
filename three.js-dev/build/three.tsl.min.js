/**
 * @license
 * Copyright 2010-2024 Three.js Authors
 * SPDX-License-Identifier: MIT
 */
import{TSL as e}from"three/webgpu";const t=e.BRDF_GGX,r=e.BRDF_Lambert,a=e.BasicShadowFilter,o=e.Break,i=e.Continue,n=e.DFGApprox,l=e.D_GGX,s=e.Discard,c=e.EPSILON,m=e.F_Schlick,p=e.Fn,d=e.INFINITY,u=e.If,g=e.Loop,h=e.NodeShaderStage,f=e.NodeType,x=e.NodeUpdateType,b=e.PCFShadowFilter,v=e.PCFSoftShadowFilter,w=e.PI,S=e.PI2,T=e.Return,_=e.Schlick_to_F0,V=e.ScriptableNodeResources,y=e.ShaderNode,D=e.TBNViewMatrix,M=e.VSMShadowFilter,C=e.V_GGX_SmithCorrelated,F=e.abs,I=e.acesFilmicToneMapping,P=e.acos,N=e.add,R=e.addMethodChaining,B=e.addNodeElement,k=e.agxToneMapping,L=e.all,A=e.alphaT,G=e.and,O=e.anisotropy,W=e.anisotropyB,j=e.anisotropyT,U=e.any,z=e.append,E=e.arrayBuffer,q=e.asin,Z=e.assign,X=e.atan,Y=e.atan2,H=e.atomicAdd,J=e.atomicAnd,K=e.atomicFunc,Q=e.atomicMax,$=e.atomicMin,ee=e.atomicOr,te=e.atomicStore,re=e.atomicSub,ae=e.atomicXor,oe=e.attenuationColor,ie=e.attenuationDistance,ne=e.attribute,le=e.attributeArray,se=e.backgroundBlurriness,ce=e.backgroundIntensity,me=e.backgroundRotation,pe=e.batch,de=e.billboarding,ue=e.bitAnd,ge=e.bitNot,he=e.bitOr,fe=e.bitXor,xe=e.bitangentGeometry,be=e.bitangentLocal,ve=e.bitangentView,we=e.bitangentWorld,Se=e.bitcast,Te=e.blendBurn,_e=e.blendColor,Ve=e.blendDodge,ye=e.blendOverlay,De=e.blendScreen,Me=e.blur,Ce=e.bool,Fe=e.buffer,Ie=e.bufferAttribute,Pe=e.bumpMap,Ne=e.burn,Re=e.bvec2,Be=e.bvec3,ke=e.bvec4,Le=e.bypass,Ae=e.cache,Ge=e.call,Oe=e.cameraFar,We=e.cameraNear,je=e.cameraNormalMatrix,Ue=e.cameraPosition,ze=e.cameraProjectionMatrix,Ee=e.cameraProjectionMatrixInverse,qe=e.cameraViewMatrix,Ze=e.cameraWorldMatrix,Xe=e.cbrt,Ye=e.cdl,He=e.ceil,Je=e.checker,Ke=e.cineonToneMapping,Qe=e.clamp,$e=e.clearcoat,et=e.clearcoatRoughness,tt=e.code,rt=e.color,at=e.colorSpaceToWorking,ot=e.colorToDirection,it=e.compute,nt=e.cond,lt=e.context,st=e.convert,ct=e.convertColorSpace,mt=e.convertToTexture,pt=e.cos,dt=e.cross,ut=e.cubeTexture,gt=e.dFdx,ht=e.dFdy,ft=e.dashSize,xt=e.defaultBuildStages,bt=e.defaultShaderStages,vt=e.defined,wt=e.degrees,St=e.deltaTime,Tt=e.densityFog,_t=e.depth,Vt=e.depthPass,yt=e.difference,Dt=e.diffuseColor,Mt=e.directPointLight,Ct=e.directionToColor,Ft=e.dispersion,It=e.distance,Pt=e.div,Nt=e.dodge,Rt=e.dot,Bt=e.drawIndex,kt=e.dynamicBufferAttribute,Lt=e.element,At=e.emissive,Gt=e.equal,Ot=e.equals,Wt=e.equirectUV,jt=e.exp,Ut=e.exp2,zt=e.expression,Et=e.faceDirection,qt=e.faceForward,Zt=e.float,Xt=e.floor,Yt=e.fog,Ht=e.fract,Jt=e.frameGroup,Kt=e.frameId,Qt=e.frontFacing,$t=e.fwidth,er=e.gain,tr=e.gapSize,rr=e.getConstNodeType,ar=e.getCurrentStack,or=e.getDirection,ir=e.getDistanceAttenuation,nr=e.getGeometryRoughness,lr=e.getNormalFromDepth,sr=e.getParallaxCorrectNormal,cr=e.getRoughness,mr=e.getScreenPosition,pr=e.getShIrradianceAt,dr=e.getTextureIndex,ur=e.getViewPosition,gr=e.glsl,hr=e.glslFn,fr=e.grayscale,xr=e.greaterThan,br=e.greaterThanEqual,vr=e.hash,wr=e.highPrecisionModelNormalViewMatrix,Sr=e.highPrecisionModelViewMatrix,Tr=e.hue,_r=e.instance,Vr=e.instanceIndex,yr=e.instancedArray,Dr=e.instancedBufferAttribute,Mr=e.instancedDynamicBufferAttribute,Cr=e.instancedMesh,Fr=e.int,Ir=e.inverseSqrt,Pr=e.invocationLocalIndex,Nr=e.invocationSubgroupIndex,Rr=e.ior,Br=e.iridescence,kr=e.iridescenceIOR,Lr=e.iridescenceThickness,Ar=e.ivec2,Gr=e.ivec3,Or=e.ivec4,Wr=e.js,jr=e.label,Ur=e.length,zr=e.lengthSq,Er=e.lessThan,qr=e.lessThanEqual,Zr=e.lightPosition,Xr=e.lightTargetDirection,Yr=e.lightTargetPosition,Hr=e.lightViewPosition,Jr=e.lightingContext,Kr=e.lights,Qr=e.linearDepth,$r=e.linearToneMapping,ea=e.localId,ta=e.log,ra=e.log2,aa=e.logarithmicDepthToViewZ,oa=e.loop,ia=e.luminance,na=e.mat2,la=e.mat3,sa=e.mat4,ca=e.matcapUV,ma=e.materialAOMap,pa=e.materialAlphaTest,da=e.materialAnisotropy,ua=e.materialAnisotropyVector,ga=e.materialAttenuationColor,ha=e.materialAttenuationDistance,fa=e.materialClearcoat,xa=e.materialClearcoatNormal,ba=e.materialClearcoatRoughness,va=e.materialColor,wa=e.materialDispersion,Sa=e.materialEmissive,Ta=e.materialIOR,_a=e.materialIridescence,Va=e.materialIridescenceIOR,ya=e.materialIridescenceThickness,Da=e.materialLightMap,Ma=e.materialLineDashOffset,Ca=e.materialLineDashSize,Fa=e.materialLineGapSize,Ia=e.materialLineScale,Pa=e.materialLineWidth,Na=e.materialMetalness,Ra=e.materialNormal,Ba=e.materialOpacity,ka=e.materialPointWidth,La=e.materialReference,Aa=e.materialReflectivity,Ga=e.materialRefractionRatio,Oa=e.materialRotation,Wa=e.materialRoughness,ja=e.materialSheen,Ua=e.materialSheenRoughness,za=e.materialShininess,Ea=e.materialSpecular,qa=e.materialSpecularColor,Za=e.materialSpecularIntensity,Xa=e.materialSpecularStrength,Ya=e.materialThickness,Ha=e.materialTransmission,Ja=e.max,Ka=e.maxMipLevel,Qa=e.metalness,$a=e.min,eo=e.mix,to=e.mixElement,ro=e.mod,ao=e.modInt,oo=e.modelDirection,io=e.modelNormalMatrix,no=e.modelPosition,lo=e.modelScale,so=e.modelViewMatrix,co=e.modelViewPosition,mo=e.modelViewProjection,po=e.modelWorldMatrix,uo=e.modelWorldMatrixInverse,go=e.morphReference,ho=e.mrt,fo=e.mul,xo=e.mx_aastep,bo=e.mx_cell_noise_float,vo=e.mx_contrast,wo=e.mx_fractal_noise_float,So=e.mx_fractal_noise_vec2,To=e.mx_fractal_noise_vec3,_o=e.mx_fractal_noise_vec4,Vo=e.mx_hsvtorgb,yo=e.mx_noise_float,Do=e.mx_noise_vec3,Mo=e.mx_noise_vec4,Co=e.mx_ramplr,Fo=e.mx_ramptb,Io=e.mx_rgbtohsv,Po=e.mx_safepower,No=e.mx_splitlr,Ro=e.mx_splittb,Bo=e.mx_srgb_texture_to_lin_rec709,ko=e.mx_transform_uv,Lo=e.mx_worley_noise_float,Ao=e.mx_worley_noise_vec2,Go=e.mx_worley_noise_vec3,Oo=e.negate,Wo=e.neutralToneMapping,jo=e.nodeArray,Uo=e.nodeImmutable,zo=e.nodeObject,Eo=e.nodeObjects,qo=e.nodeProxy,Zo=e.normalFlat,Xo=e.normalGeometry,Yo=e.normalLocal,Ho=e.normalMap,Jo=e.normalView,Ko=e.normalWorld,Qo=e.normalize,$o=e.not,ei=e.notEqual,ti=e.numWorkgroups,ri=e.objectDirection,ai=e.objectGroup,oi=e.objectPosition,ii=e.objectScale,ni=e.objectViewPosition,li=e.objectWorldMatrix,si=e.oneMinus,ci=e.or,mi=e.orthographicDepthToViewZ,pi=e.oscSawtooth,di=e.oscSine,ui=e.oscSquare,gi=e.oscTriangle,hi=e.output,fi=e.outputStruct,xi=e.overlay,bi=e.overloadingFn,vi=e.parabola,wi=e.parallaxDirection,Si=e.parallaxUV,Ti=e.parameter,_i=e.pass,Vi=e.passTexture,yi=e.pcurve,Di=e.perspectiveDepthToViewZ,Mi=e.pmremTexture,Ci=e.pointUV,Fi=e.pointWidth,Ii=e.positionGeometry,Pi=e.positionLocal,Ni=e.positionPrevious,Ri=e.positionView,Bi=e.positionViewDirection,ki=e.positionWorld,Li=e.positionWorldDirection,Ai=e.posterize,Gi=e.pow,Oi=e.pow2,Wi=e.pow3,ji=e.pow4,Ui=e.property,zi=e.radians,Ei=e.rand,qi=e.range,Zi=e.rangeFog,Xi=e.reciprocal,Yi=e.reference,Hi=e.referenceBuffer,Ji=e.reflect,Ki=e.reflectVector,Qi=e.reflectView,$i=e.reflector,en=e.refract,tn=e.refractVector,rn=e.refractView,an=e.reinhardToneMapping,on=e.remainder,nn=e.remap,ln=e.remapClamp,sn=e.renderGroup,cn=e.renderOutput,mn=e.rendererReference,pn=e.rotate,dn=e.rotateUV,un=e.roughness,gn=e.round,hn=e.rtt,fn=e.sRGBTransferEOTF,xn=e.sRGBTransferOETF,bn=e.sampler,vn=e.saturate,wn=e.saturation,Sn=e.screen,Tn=e.screenCoordinate,_n=e.screenSize,Vn=e.screenUV,yn=e.scriptable,Dn=e.scriptableValue,Mn=e.select,Cn=e.setCurrentStack,Fn=e.shaderStages,In=e.shadow,Pn=e.sharedUniformGroup,Nn=e.sheen,Rn=e.sheenRoughness,Bn=e.shiftLeft,kn=e.shiftRight,Ln=e.shininess,An=e.sign,Gn=e.sin,On=e.sinc,Wn=e.skinning,jn=e.skinningReference,Un=e.smoothstep,zn=e.smoothstepElement,En=e.specularColor,qn=e.specularF90,Zn=e.spherizeUV,Xn=e.split,Yn=e.spritesheetUV,Hn=e.sqrt,Jn=e.stack,Kn=e.step,Qn=e.storage,$n=e.storageBarrier,el=e.storageObject,tl=e.storageTexture,rl=e.string,al=e.sub,ol=e.subgroupIndex,il=e.subgroupSize,nl=e.tan,ll=e.tangentGeometry,sl=e.tangentLocal,cl=e.tangentView,ml=e.tangentWorld,pl=e.temp,dl=e.texture,ul=e.texture3D,gl=e.textureBarrier,hl=e.textureBicubic,fl=e.textureCubeUV,xl=e.textureLoad,bl=e.textureSize,vl=e.textureStore,wl=e.thickness,Sl=e.threshold,Tl=e.time,_l=e.timerDelta,Vl=e.timerGlobal,yl=e.timerLocal,Dl=e.toOutputColorSpace,Ml=e.toWorkingColorSpace,Cl=e.toneMapping,Fl=e.toneMappingExposure,Il=e.toonOutlinePass,Pl=e.transformDirection,Nl=e.transformNormal,Rl=e.transformNormalToView,Bl=e.transformedBentNormalView,kl=e.transformedBitangentView,Ll=e.transformedBitangentWorld,Al=e.transformedClearcoatNormalView,Gl=e.transformedNormalView,Ol=e.transformedNormalWorld,Wl=e.transformedTangentView,jl=e.transformedTangentWorld,Ul=e.transmission,zl=e.transpose,El=e.tri,ql=e.tri3,Zl=e.triNoise3D,Xl=e.triplanarTexture,Yl=e.triplanarTextures,Hl=e.trunc,Jl=e.tslFn,Kl=e.uint,Ql=e.uniform,$l=e.uniformArray,es=e.uniformGroup,ts=e.uniforms,rs=e.userData,as=e.uv,os=e.uvec2,is=e.uvec3,ns=e.uvec4,ls=e.varying,ss=e.varyingProperty,cs=e.vec2,ms=e.vec3,ps=e.vec4,ds=e.vectorComponents,us=e.velocity,gs=e.vertexColor,hs=e.vertexIndex,fs=e.vibrance,xs=e.viewZToLogarithmicDepth,bs=e.viewZToOrthographicDepth,vs=e.viewZToPerspectiveDepth,ws=e.viewport,Ss=e.viewportBottomLeft,Ts=e.viewportCoordinate,_s=e.viewportDepthTexture,Vs=e.viewportLinearDepth,ys=e.viewportMipTexture,Ds=e.viewportResolution,Ms=e.viewportSafeUV,Cs=e.viewportSharedTexture,Fs=e.viewportSize,Is=e.viewportTexture,Ps=e.viewportTopLeft,Ns=e.viewportUV,Rs=e.wgsl,Bs=e.wgslFn,ks=e.workgroupArray,Ls=e.workgroupBarrier,As=e.workgroupId,Gs=e.workingToColorSpace,Os=e.xor;export{t as BRDF_GGX,r as BRDF_Lambert,a as BasicShadowFilter,o as Break,i as Continue,n as DFGApprox,l as D_GGX,s as Discard,c as EPSILON,m as F_Schlick,p as Fn,d as INFINITY,u as If,g as Loop,h as NodeShaderStage,f as NodeType,x as NodeUpdateType,b as PCFShadowFilter,v as PCFSoftShadowFilter,w as PI,S as PI2,T as Return,_ as Schlick_to_F0,V as ScriptableNodeResources,y as ShaderNode,D as TBNViewMatrix,M as VSMShadowFilter,C as V_GGX_SmithCorrelated,F as abs,I as acesFilmicToneMapping,P as acos,N as add,R as addMethodChaining,B as addNodeElement,k as agxToneMapping,L as all,A as alphaT,G as and,O as anisotropy,W as anisotropyB,j as anisotropyT,U as any,z as append,E as arrayBuffer,q as asin,Z as assign,X as atan,Y as atan2,H as atomicAdd,J as atomicAnd,K as atomicFunc,Q as atomicMax,$ as atomicMin,ee as atomicOr,te as atomicStore,re as atomicSub,ae as atomicXor,oe as attenuationColor,ie as attenuationDistance,ne as attribute,le as attributeArray,se as backgroundBlurriness,ce as backgroundIntensity,me as backgroundRotation,pe as batch,de as billboarding,ue as bitAnd,ge as bitNot,he as bitOr,fe as bitXor,xe as bitangentGeometry,be as bitangentLocal,ve as bitangentView,we as bitangentWorld,Se as bitcast,Te as blendBurn,_e as blendColor,Ve as blendDodge,ye as blendOverlay,De as blendScreen,Me as blur,Ce as bool,Fe as buffer,Ie as bufferAttribute,Pe as bumpMap,Ne as burn,Re as bvec2,Be as bvec3,ke as bvec4,Le as bypass,Ae as cache,Ge as call,Oe as cameraFar,We as cameraNear,je as cameraNormalMatrix,Ue as cameraPosition,ze as cameraProjectionMatrix,Ee as cameraProjectionMatrixInverse,qe as cameraViewMatrix,Ze as cameraWorldMatrix,Xe as cbrt,Ye as cdl,He as ceil,Je as checker,Ke as cineonToneMapping,Qe as clamp,$e as clearcoat,et as clearcoatRoughness,tt as code,rt as color,at as colorSpaceToWorking,ot as colorToDirection,it as compute,nt as cond,lt as context,st as convert,ct as convertColorSpace,mt as convertToTexture,pt as cos,dt as cross,ut as cubeTexture,gt as dFdx,ht as dFdy,ft as dashSize,xt as defaultBuildStages,bt as defaultShaderStages,vt as defined,wt as degrees,St as deltaTime,Tt as densityFog,_t as depth,Vt as depthPass,yt as difference,Dt as diffuseColor,Mt as directPointLight,Ct as directionToColor,Ft as dispersion,It as distance,Pt as div,Nt as dodge,Rt as dot,Bt as drawIndex,kt as dynamicBufferAttribute,Lt as element,At as emissive,Gt as equal,Ot as equals,Wt as equirectUV,jt as exp,Ut as exp2,zt as expression,Et as faceDirection,qt as faceForward,Zt as float,Xt as floor,Yt as fog,Ht as fract,Jt as frameGroup,Kt as frameId,Qt as frontFacing,$t as fwidth,er as gain,tr as gapSize,rr as getConstNodeType,ar as getCurrentStack,or as getDirection,ir as getDistanceAttenuation,nr as getGeometryRoughness,lr as getNormalFromDepth,sr as getParallaxCorrectNormal,cr as getRoughness,mr as getScreenPosition,pr as getShIrradianceAt,dr as getTextureIndex,ur as getViewPosition,gr as glsl,hr as glslFn,fr as grayscale,xr as greaterThan,br as greaterThanEqual,vr as hash,wr as highPrecisionModelNormalViewMatrix,Sr as highPrecisionModelViewMatrix,Tr as hue,_r as instance,Vr as instanceIndex,yr as instancedArray,Dr as instancedBufferAttribute,Mr as instancedDynamicBufferAttribute,Cr as instancedMesh,Fr as int,Ir as inverseSqrt,Pr as invocationLocalIndex,Nr as invocationSubgroupIndex,Rr as ior,Br as iridescence,kr as iridescenceIOR,Lr as iridescenceThickness,Ar as ivec2,Gr as ivec3,Or as ivec4,Wr as js,jr as label,Ur as length,zr as lengthSq,Er as lessThan,qr as lessThanEqual,Zr as lightPosition,Xr as lightTargetDirection,Yr as lightTargetPosition,Hr as lightViewPosition,Jr as lightingContext,Kr as lights,Qr as linearDepth,$r as linearToneMapping,ea as localId,ta as log,ra as log2,aa as logarithmicDepthToViewZ,oa as loop,ia as luminance,na as mat2,la as mat3,sa as mat4,ca as matcapUV,ma as materialAOMap,pa as materialAlphaTest,da as materialAnisotropy,ua as materialAnisotropyVector,ga as materialAttenuationColor,ha as materialAttenuationDistance,fa as materialClearcoat,xa as materialClearcoatNormal,ba as materialClearcoatRoughness,va as materialColor,wa as materialDispersion,Sa as materialEmissive,Ta as materialIOR,_a as materialIridescence,Va as materialIridescenceIOR,ya as materialIridescenceThickness,Da as materialLightMap,Ma as materialLineDashOffset,Ca as materialLineDashSize,Fa as materialLineGapSize,Ia as materialLineScale,Pa as materialLineWidth,Na as materialMetalness,Ra as materialNormal,Ba as materialOpacity,ka as materialPointWidth,La as materialReference,Aa as materialReflectivity,Ga as materialRefractionRatio,Oa as materialRotation,Wa as materialRoughness,ja as materialSheen,Ua as materialSheenRoughness,za as materialShininess,Ea as materialSpecular,qa as materialSpecularColor,Za as materialSpecularIntensity,Xa as materialSpecularStrength,Ya as materialThickness,Ha as materialTransmission,Ja as max,Ka as maxMipLevel,Qa as metalness,$a as min,eo as mix,to as mixElement,ro as mod,ao as modInt,oo as modelDirection,io as modelNormalMatrix,no as modelPosition,lo as modelScale,so as modelViewMatrix,co as modelViewPosition,mo as modelViewProjection,po as modelWorldMatrix,uo as modelWorldMatrixInverse,go as morphReference,ho as mrt,fo as mul,xo as mx_aastep,bo as mx_cell_noise_float,vo as mx_contrast,wo as mx_fractal_noise_float,So as mx_fractal_noise_vec2,To as mx_fractal_noise_vec3,_o as mx_fractal_noise_vec4,Vo as mx_hsvtorgb,yo as mx_noise_float,Do as mx_noise_vec3,Mo as mx_noise_vec4,Co as mx_ramplr,Fo as mx_ramptb,Io as mx_rgbtohsv,Po as mx_safepower,No as mx_splitlr,Ro as mx_splittb,Bo as mx_srgb_texture_to_lin_rec709,ko as mx_transform_uv,Lo as mx_worley_noise_float,Ao as mx_worley_noise_vec2,Go as mx_worley_noise_vec3,Oo as negate,Wo as neutralToneMapping,jo as nodeArray,Uo as nodeImmutable,zo as nodeObject,Eo as nodeObjects,qo as nodeProxy,Zo as normalFlat,Xo as normalGeometry,Yo as normalLocal,Ho as normalMap,Jo as normalView,Ko as normalWorld,Qo as normalize,$o as not,ei as notEqual,ti as numWorkgroups,ri as objectDirection,ai as objectGroup,oi as objectPosition,ii as objectScale,ni as objectViewPosition,li as objectWorldMatrix,si as oneMinus,ci as or,mi as orthographicDepthToViewZ,pi as oscSawtooth,di as oscSine,ui as oscSquare,gi as oscTriangle,hi as output,fi as outputStruct,xi as overlay,bi as overloadingFn,vi as parabola,wi as parallaxDirection,Si as parallaxUV,Ti as parameter,_i as pass,Vi as passTexture,yi as pcurve,Di as perspectiveDepthToViewZ,Mi as pmremTexture,Ci as pointUV,Fi as pointWidth,Ii as positionGeometry,Pi as positionLocal,Ni as positionPrevious,Ri as positionView,Bi as positionViewDirection,ki as positionWorld,Li as positionWorldDirection,Ai as posterize,Gi as pow,Oi as pow2,Wi as pow3,ji as pow4,Ui as property,zi as radians,Ei as rand,qi as range,Zi as rangeFog,Xi as reciprocal,Yi as reference,Hi as referenceBuffer,Ji as reflect,Ki as reflectVector,Qi as reflectView,$i as reflector,en as refract,tn as refractVector,rn as refractView,an as reinhardToneMapping,on as remainder,nn as remap,ln as remapClamp,sn as renderGroup,cn as renderOutput,mn as rendererReference,pn as rotate,dn as rotateUV,un as roughness,gn as round,hn as rtt,fn as sRGBTransferEOTF,xn as sRGBTransferOETF,bn as sampler,vn as saturate,wn as saturation,Sn as screen,Tn as screenCoordinate,_n as screenSize,Vn as screenUV,yn as scriptable,Dn as scriptableValue,Mn as select,Cn as setCurrentStack,Fn as shaderStages,In as shadow,Pn as sharedUniformGroup,Nn as sheen,Rn as sheenRoughness,Bn as shiftLeft,kn as shiftRight,Ln as shininess,An as sign,Gn as sin,On as sinc,Wn as skinning,jn as skinningReference,Un as smoothstep,zn as smoothstepElement,En as specularColor,qn as specularF90,Zn as spherizeUV,Xn as split,Yn as spritesheetUV,Hn as sqrt,Jn as stack,Kn as step,Qn as storage,$n as storageBarrier,el as storageObject,tl as storageTexture,rl as string,al as sub,ol as subgroupIndex,il as subgroupSize,nl as tan,ll as tangentGeometry,sl as tangentLocal,cl as tangentView,ml as tangentWorld,pl as temp,dl as texture,ul as texture3D,gl as textureBarrier,hl as textureBicubic,fl as textureCubeUV,xl as textureLoad,bl as textureSize,vl as textureStore,wl as thickness,Sl as threshold,Tl as time,_l as timerDelta,Vl as timerGlobal,yl as timerLocal,Dl as toOutputColorSpace,Ml as toWorkingColorSpace,Cl as toneMapping,Fl as toneMappingExposure,Il as toonOutlinePass,Pl as transformDirection,Nl as transformNormal,Rl as transformNormalToView,Bl as transformedBentNormalView,kl as transformedBitangentView,Ll as transformedBitangentWorld,Al as transformedClearcoatNormalView,Gl as transformedNormalView,Ol as transformedNormalWorld,Wl as transformedTangentView,jl as transformedTangentWorld,Ul as transmission,zl as transpose,El as tri,ql as tri3,Zl as triNoise3D,Xl as triplanarTexture,Yl as triplanarTextures,Hl as trunc,Jl as tslFn,Kl as uint,Ql as uniform,$l as uniformArray,es as uniformGroup,ts as uniforms,rs as userData,as as uv,os as uvec2,is as uvec3,ns as uvec4,ls as varying,ss as varyingProperty,cs as vec2,ms as vec3,ps as vec4,ds as vectorComponents,us as velocity,gs as vertexColor,hs as vertexIndex,fs as vibrance,xs as viewZToLogarithmicDepth,bs as viewZToOrthographicDepth,vs as viewZToPerspectiveDepth,ws as viewport,Ss as viewportBottomLeft,Ts as viewportCoordinate,_s as viewportDepthTexture,Vs as viewportLinearDepth,ys as viewportMipTexture,Ds as viewportResolution,Ms as viewportSafeUV,Cs as viewportSharedTexture,Fs as viewportSize,Is as viewportTexture,Ps as viewportTopLeft,Ns as viewportUV,Rs as wgsl,Bs as wgslFn,ks as workgroupArray,Ls as workgroupBarrier,As as workgroupId,Gs as workingToColorSpace,Os as xor};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
